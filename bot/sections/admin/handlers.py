import os
import zipfile

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
    Message,
    CallbackQuery
)
from bson import ObjectId
from motor.core import AgnosticDatabase

from bot.sections.admin.data import *
from bot.sections.admin.services import *
from bot.sections.admin.states import (
    StageSelectionStates,
    BroadcastStates,
    TeamMessageState
)
from bot.sections.user.quiz_about_user.services import is_user_registered
from bot.utils.keyboards.admin_keyboard import (
    get_main_admin_keyboard,
    get_stage_selection_keyboard,
    get_broadcast_inline_keyboard,
    get_team_actions_inline_keyboard
)
from bot.utils.keyboards.start_keyboard import get_start_keyboard, get_user_team_info
from config_reader import ADMIN_PASSWORD

router = Router()


@router.message(F.text == str(ADMIN_PASSWORD))
async def open_admin_panel(message: types.Message):
    await message.answer(ADMIN_WELCOME, reply_markup=get_main_admin_keyboard())


@router.message(F.text == "–í–∏–π—Ç–∏ –∑ –∞–¥–º—ñ–Ω–∫–∏")
async def handle_admin_exit(message: Message, db: AgnosticDatabase):
    is_registered = await is_user_registered(db, message.from_user.username)
    test_approved, event_approved = await get_user_team_info(db, message.from_user.id)
    stage = await get_current_stage(db)
    await message.answer(ADMIN_EXIT, reply_markup=get_start_keyboard(stage, is_registered, test_approved, event_approved))


@router.message(F.text == "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ —Å–µ–∫—Ü—ñ—é")
async def handle_toggle_section(message: Message, state: FSMContext):
    await message.answer(STAGE_SELECTION_PROMPT, reply_markup=get_stage_selection_keyboard())
    await state.set_state(StageSelectionStates.waiting_for_stage)


@router.message(StageSelectionStates.waiting_for_stage)
async def process_stage_selection(message: Message, state: FSMContext, db: AgnosticDatabase):
    chosen_stage = message.text.strip()
    stage_mapping = {
        "–ü–æ—á–∞—Ç–æ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó": "before_registration",
        "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è": "registration",
        "–¢–µ—Å—Ç–æ–≤–µ" : "test",
        "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —ñ–≤–µ–Ω—Ç—É": "before_event",
        "–Ü–≤–µ–Ω—Ç": "event",
        "–ü—ñ—Å–ª—è —ñ–≤–µ–Ω—Ç—É": "after_event"
    }
    valid_stages = stage_mapping.keys()

    if chosen_stage == "–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–º—ñ–Ω—É —Å—Ç–∞–¥—ñ—ó":
        await message.answer(STAGE_SELECTION_CANCEL, reply_markup=get_main_admin_keyboard())
        await state.clear()
        return

    if chosen_stage not in valid_stages:
        await message.answer(STAGE_SELECTION_INVALID, reply_markup=get_stage_selection_keyboard())
        return

    new_stage = stage_mapping[chosen_stage]
    await update_stage(db, new_stage)

    all_users = await get_all_users(db)



    teams_approved_event = await get_teams_with_participation_status(db, True)
    teams_not_approved_event = await get_teams_with_participation_status(db, False)

    team_ids_approved_event = [team["_id"] for team in teams_approved_event]
    team_ids_not_approved_event = [team["_id"] for team in teams_not_approved_event]

    test_approved, event_approved = await get_user_team_info(db, message.from_user.id)

    if new_stage in ["before_registration", "registration"]:
        message_text = (
            "–£—Ä–∞–∞! –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–∑–ø–æ—á–∞—Ç–∞!"
            if new_stage == "registration"
            else "–£—Ä–∞–∞! –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–∑–ø–æ—á–∞—Ç–∞!"
        )
        for user in all_users:
            chat_id = user.get("chat_id")
            await is_user_registered(db, user.get("username"))
            if chat_id:
                try:
                    await message.bot.send_message(
                        chat_id,
                        message_text,
                        reply_markup=get_start_keyboard(new_stage, True, test_approved, event_approved)
                    )
                except Exception as e:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}: {e}")

    elif new_stage == "test":
        all_teams = await db.get_collection("teams").find({}).to_list(length=None)
        for team in all_teams:
            team_id = team["_id"]
            member_count = await db.get_collection("users").count_documents({"team_id": team_id})
            if member_count >= 3:
                await db.get_collection("teams").update_one(
                    {"_id": team_id},
                    {"$set": {"test_task_status": True}}
                )

        teams_passed_test = await get_teams_by_test_status(db, True)
        teams_not_passed_test = await get_teams_by_test_status(db, False)

        team_ids_passed = [team["_id"] for team in teams_passed_test]
        team_ids_not_passed = [team["_id"] for team in teams_not_passed_test]

        test_approved, event_approved = await get_user_team_info(db, message.from_user.id)
        for team_id in team_ids_passed:
            recipients = await get_users_by_team_ids(db, [team_id])
            for recipient in recipients:
                chat_id = recipient.get("chat_id")
                if chat_id:
                    try:
                        await message.bot.send_message(
                            chat_id,
                            (
                                "–í—ñ—Ç–∞—î–º–æ! –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ø—É—â–µ–Ω–∞ –¥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ. "
                                "–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ –π —É—Å–ø—ñ—Ö—ñ–≤!"
                            ),
                            reply_markup=get_start_keyboard(new_stage, True, test_approved, event_approved)
                        )
                    except Exception as e:
                        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}: {e}")

        for team_id in team_ids_not_passed:
            recipients = await get_users_by_team_ids(db, [team_id])
            for recipient in recipients:
                chat_id = recipient.get("chat_id")
                if chat_id:
                    try:
                        await message.bot.send_message(
                            chat_id,
                            "–ù–∞ –∂–∞–ª—å, –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ–ø—É—â–µ–Ω–∞ –¥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ",
                            reply_markup=get_start_keyboard("registration", True, test_approved, event_approved)
                        )
                    except Exception as e:
                        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}: {e}")

    elif new_stage == "before_event":
        for team_id in team_ids_approved_event:
            recipients = await get_users_by_team_ids(db, [team_id])
            for recipient in recipients:
                chat_id = recipient.get("chat_id")
                if chat_id:
                    try:
                        await message.bot.send_message(
                            chat_id,
                            (
                                "üöÄ –ü—Ä–∏–≤—ñ—Ç, –º–∞–π–±—É—Ç–Ω—ñ —á–µ–º–ø—ñ–æ–Ω–∏! –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–ª–∏ "
                                "—Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äì —Ü–µ –≤–∂–µ —É—Å–ø—ñ—Ö! üèÜ\n"
                                "–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ - –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å BEST::HACKath0n 2025! "
                                "–¢–µ–ø–µ—Ä –¥–ª—è –≤–∞—Å –≤—ñ–¥–∫—Ä–∏–≤–∞—é—Ç—å—Å—è –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ—î–∫—Ç—É. üî•"
                            ),
                            reply_markup=get_start_keyboard(new_stage, True, test_approved, event_approved)
                        )
                    except Exception as e:
                        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}: {e}")

        for team_id in team_ids_not_approved_event:
            recipients = await get_users_by_team_ids(db, [team_id])
            for recipient in recipients:
                chat_id = recipient.get("chat_id")
                if chat_id:
                    try:
                        await message.bot.send_message(
                            chat_id,
                            "–ù–µ –∑–∞—Å–º—É—á—É–π—Ç–µ—Å—å! –í–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è.",
                            reply_markup=get_start_keyboard("registration", True, test_approved, event_approved)
                        )
                    except Exception as e:
                        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}: {e}")

    elif new_stage in ["event", "after_event"]:
        message_text = (
            "–Ü–≤–µ–Ω—Ç —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –£ –≤–∞—Å 24 –≥–æ–¥–∏–Ω–∏" if new_stage == "event" else "–Ü–≤–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
        )
        for team_id in team_ids_approved_event:
            recipients = await get_users_by_team_ids(db, [team_id])
            for recipient in recipients:
                chat_id = recipient.get("chat_id")
                if chat_id:
                    try:
                        await message.bot.send_message(
                            chat_id,
                            message_text,
                            reply_markup=get_start_keyboard(new_stage, True, test_approved, event_approved)
                        )
                    except Exception as e:
                        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}: {e}")

    await message.answer(
        STAGE_SWITCHED.format(chosen_stage),
        reply_markup=get_main_admin_keyboard()
    )
    await state.clear()


@router.message(F.text == "–†–æ–∑—Å–∏–ª–∫–∞")
async def handle_broadcast_menu(message: Message):
    await message.answer(BROADCAST_PROMPT, reply_markup=get_broadcast_inline_keyboard())


@router.callback_query(F.data.startswith("broadcast:"))
async def handle_broadcast_category_callback(query: CallbackQuery, state: FSMContext, db: AgnosticDatabase):
    category = query.data.split(":")[1]
    if category == "cancel":
        await query.message.edit_text(BROADCAST_CANCEL)
        await state.clear()
        return

    await state.update_data({"target": category})
    await state.set_state(BroadcastStates.waiting_for_message)
    await query.message.edit_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:")


@router.message(BroadcastStates.waiting_for_message)
async def handle_broadcast_message(message: Message, state: FSMContext, db: AgnosticDatabase):
    data = await state.get_data()
    target = data.get("target")
    recipients = []

    if target == "all":
        recipients = await get_all_users(db)
    elif target == "in_teams":
        recipients = await db.get_collection("users").find(
            {"team_id": {"$exists": True}}
        ).to_list(length=None)
    elif target == "not_in_teams":
        recipients = await db.get_collection("users").find(
            {"team_id": {"$exists": False}}
        ).to_list(length=None)
    elif target == "teams_less_than_3":
        teams = await list_teams(db)
        team_ids = [
            team["_id"]
            for team in teams
            if (await db.get_collection("users").count_documents({"team_id": team["_id"]}) < 3)
        ]
        recipients = await get_users_by_team_ids(db, team_ids)
    elif target == "in_teams_passed_test":
        teams = await get_teams_by_test_status(db, True)
        team_ids = [team["_id"] for team in teams]
        recipients = await get_users_by_team_ids(db, team_ids)
    elif target == "in_teams_not_passed_test":
        teams = await get_teams_by_test_status(db, False)
        team_ids = [team["_id"] for team in teams]
        recipients = await get_users_by_team_ids(db, team_ids)
    elif target == "in_teams_approved_event":
        teams = await get_teams_with_participation_status(db, True)
        team_ids = [team["_id"] for team in teams]
        recipients = await get_users_by_team_ids(db, team_ids)
    elif target == "in_teams_not_approved_event":
        teams = await get_teams_with_participation_status(db, False)
        team_ids = [team["_id"] for team in teams]
        recipients = await get_users_by_team_ids(db, team_ids)

    if message.text:
        content_type = "text"
        content = message.text
        caption = None
    elif message.photo:
        content_type = "photo"
        content = message.photo[-1].file_id
        caption = message.caption or ""
    elif message.document:
        content_type = "document"
        content = message.document.file_id
        caption = message.caption or ""
    else:
        await message.answer(
            "–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç.",
            parse_mode="HTML"
        )
        return

    for recipient in recipients:
        chat_id = recipient.get("chat_id")
        if not chat_id:
            continue
        try:
            if content_type == "text":
                await message.bot.send_message(
                    chat_id=chat_id,
                    text=content,
                    parse_mode="HTML"
                )
            elif content_type == "photo":
                await message.bot.send_photo(
                    chat_id=chat_id,
                    photo=content,
                    caption=caption,
                    parse_mode="HTML"
                )
            elif content_type == "document":
                await message.bot.send_document(
                    chat_id=chat_id,
                    document=content,
                    caption=caption,
                    parse_mode="HTML"
                )
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è {content_type} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}: {e}")

    await message.answer(
        BROADCAST_COMPLETE.format(target),
        reply_markup=get_main_admin_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()


@router.message(F.text == "–†–æ–±–æ—Ç–∞ –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏")
async def handle_list_teams(message: Message, db: AgnosticDatabase):
    teams = await list_teams(db)
    if not teams:
        await message.answer(NO_TEAMS_AVAILABLE, reply_markup=get_main_admin_keyboard())
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=team.get("name", f"–ö–æ–º–∞–Ω–¥–∞ {team['_id']}"),
                    callback_data=f"team:select:{team['_id']}"
                )
            ]
            for team in teams
        ]
    )

    await message.answer(TEAM_SELECTION_PROMPT, reply_markup=kb)


@router.callback_query(F.data == "teams:return_list")
async def handle_return_to_team_list(query: CallbackQuery, db: AgnosticDatabase):
    teams = await list_teams(db)
    if not teams:
        await query.message.edit_text(NO_TEAMS_AVAILABLE, reply_markup=None)
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=team.get("name", f"–ö–æ–º–∞–Ω–¥–∞ {team['_id']}"),
                    callback_data=f"team:select:{team['_id']}"
                )
            ]
            for team in teams
        ]
    )
    await query.message.edit_text(TEAM_SELECTION_PROMPT, reply_markup=kb)


@router.callback_query(F.data.startswith("team:select:"))
async def handle_select_team_callback(query: CallbackQuery, db: AgnosticDatabase):
    _, _, team_id = query.data.split(":")
    try:
        team_object_id = ObjectId(team_id)
    except Exception as e:
        print(f"Invalid ObjectId format: {team_id}")
        await query.answer(INVALID_TEAM_ID, show_alert=True)
        return

    team = await db.get_collection("teams").find_one({"_id": team_object_id})
    if not team:
        await query.answer(TEAM_NOT_FOUND, show_alert=True)
        return

    team_name = team.get("name", f"team_{team_id}")
    await query.message.edit_text(
        TEAM_SELECTED.format(team_name),
        reply_markup=get_team_actions_inline_keyboard(str(team_id))
    )


@router.callback_query(F.data.startswith("team:"))
async def handle_team_actions(query: CallbackQuery, db: AgnosticDatabase, state: FSMContext):
    parts = query.data.split(":")
    if len(parts) < 3:
        await query.answer(INVALID_DATA_FORMAT, show_alert=True)
        return

    action = parts[1]
    team_id = parts[2]

    try:
        team_object_id = ObjectId(team_id)
    except Exception as e:
        print(f"Invalid ObjectId format: {team_id}")
        await query.answer(INVALID_TEAM_ID, show_alert=True)
        return

    if action == "members":
        members_info = await get_team_members_info(db, team_object_id)
        text = members_info or "–£—á–∞—Å–Ω–∏–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        await query.message.answer(text)
        await query.answer()

    elif action == "repo":
        repo_link = await get_team_repo_link(db, team_object_id)
        text = repo_link or "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –Ω–µ –≤–∫–∞–∑–∞–Ω–æ."
        await query.message.answer(text)
        await query.answer()

    elif action == "tech":
        team_members = await db.get_collection("users").find(
            {"team_id": team_object_id}
        ).to_list(length=None)
        tech_info = [
            f"{member.get('name', '–ù–µ–≤—ñ–¥–æ–º–æ')}: "
            f"{member.get('technologies', '–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó –Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}"
            for member in team_members
        ]
        text = "\n".join(tech_info) if tech_info else "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó –Ω–µ –≤–∫–∞–∑–∞–Ω–æ."
        await query.message.answer(text)
        await query.answer()

    elif action == "cv":
        team = await db.get_collection("teams").find_one({"_id": team_object_id})
        if not team:
            await query.answer("–ö–æ–º–∞–Ω–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        team_name = team.get("name", "unknown_team")
        team_members = await db.get_collection("users").find(
            {"team_id": team_object_id}
        ).to_list(length=None)

        if not team_members:
            await query.answer("–£—á–∞—Å–Ω–∏–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        zip_filename = f"{team_name}_cvs.zip"
        with zipfile.ZipFile(zip_filename, "w") as zipf:
            for member in team_members:
                resume = member.get("resume")
                if resume:
                    file_id = resume["file_id"]
                    file_name = resume["file_name"]
                    file = await query.bot.get_file(file_id)
                    file_path = file.file_path
                    await query.bot.download_file(file_path, file_name)
                    zipf.write(file_name, file_name)
                    os.remove(file_name)

        await query.message.answer_document(FSInputFile(zip_filename))
        os.remove(zip_filename)
        await query.answer("CVs –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")

    elif action == "approve_test":
        await approve_test_submission(db, team_object_id)
        await query.message.answer("–¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∞–ø—Ä—É–≤–Ω—É—Ç–æ.")
        await query.answer()

        team_members = await db.get_collection("users").find(
            {"team_id": team_object_id}
        ).to_list(length=None)
        # for member in team_members:
        #     chat_id = member.get("chat_id")
        #     if chat_id:
        #         try:
        #             await query.bot.send_message(
        #                 chat_id,
        #                 "–í—ñ—Ç–∞—é. –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ø—É—â–µ–Ω–∞ –¥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è!"
        #             )
        #         except Exception as e:
        #             print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}: {e}")

    elif action == "approve_event":
        await approve_event_participation(db, team_object_id)
        await query.message.answer("–£—á–∞—Å—Ç—å –≤ —ñ–≤–µ–Ω—Ç—ñ –∞–ø—Ä—É–≤–Ω—É—Ç–æ.")
        await query.answer()

        team_members = await db.get_collection("users").find(
            {"team_id": team_object_id}
        ).to_list(length=None)
        # for member in team_members:
        #     chat_id = member.get("chat_id")
        #     if chat_id:
        #         try:
        #             await query.bot.send_message(
        #                 chat_id,
        #                 "–í—ñ—Ç–∞—é.–í–∏ –ø—Ä–æ–π—à–ª–∏ —Ç–µ—Å—Ç–æ–≤–µ —ñ –¥–æ–ø—É—â–µ–Ω—ñ –¥–æ —ñ–≤–µ–Ω—Ç—É.",
        #                 parse_mode="HTML"
        #             )
        #         except Exception as e:
        #             print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}: {e}")

    elif action == "delete":
        await delete_team(db, team_object_id)
        await query.message.answer("–ö–æ–º–∞–Ω–¥—É –≤–∏–¥–∞–ª–µ–Ω–æ.")
        await query.answer()

        teams = await list_teams(db)
        if not teams:
            await query.message.answer(NO_TEAMS_AVAILABLE)
            return

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=team.get("name", f"–ö–æ–º–∞–Ω–¥–∞ {team['_id']}"),
                        callback_data=f"team:select:{str(team['_id'])}"
                    )
                ]
                for team in teams
            ]
        )
        await query.message.answer(TEAM_SELECTION_PROMPT, reply_markup=kb)

    if action == "message":
        await state.update_data({"team_id": team_id})
        await state.set_state(TeamMessageState.waiting_for_message)
        await query.message.answer(
            "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ü—ñ–π –∫–æ–º–∞–Ω–¥—ñ:"
        )
        await query.answer()
        return
    else:
        await query.answer(UNKNOWN_ACTION, show_alert=True)


@router.message(TeamMessageState.waiting_for_message)
async def handle_team_message(message: Message, state: FSMContext, db: AgnosticDatabase):
    data = await state.get_data()
    team_id = data.get("team_id")
    if not team_id:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await state.clear()
        return

    if message.text:
        content_type = "text"
        content = message.text
        caption = None
    elif message.photo:
        content_type = "photo"
        content = message.photo[-1].file_id
        caption = message.caption or ""
    elif message.document:
        content_type = "document"
        content = message.document.file_id
        caption = message.caption or ""
    else:
        await message.answer("–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    try:
        team_object_id = ObjectId(team_id)
    except:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ–º–∞–Ω–¥–∏.")
        await state.clear()
        return

    team_members = await db.get_collection("users").find(
        {"team_id": team_object_id}
    ).to_list(length=None)

    for member in team_members:
        chat_id = member.get("chat_id")
        if not chat_id:
            continue
        try:
            if content_type == "text":
                await message.bot.send_message(
                    chat_id=chat_id,
                    text=content,
                    parse_mode="HTML"
                )
            elif content_type == "photo":
                await message.bot.send_photo(
                    chat_id=chat_id,
                    photo=content,
                    caption=caption,
                    parse_mode="HTML"
                )
            elif content_type == "document":
                await message.bot.send_document(
                    chat_id=chat_id,
                    document=content,
                    caption=caption,
                    parse_mode="HTML"
                )
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è {content_type} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}: {e}")

    await message.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥–∏.")
    await state.clear()


@router.message(F.text == "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ CV")
async def handle_download_all_cvs(message: Message, db: AgnosticDatabase):
    teams = await db.get_collection("teams").find({"participation_status": True}).to_list(length=None)
    if not teams:
        await message.answer("–ù–µ–º–∞—î –∫–æ–º–∞–Ω–¥ –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º —É—á–∞—Å—Ç—ñ –≤ —ñ–≤–µ–Ω—Ç—ñ.")
        return

    main_zip_filename = "all_teams_cvs.zip"
    with zipfile.ZipFile(main_zip_filename, "w") as main_zip:
        for team in teams:
            team_name = team.get("name", f"team_{team['_id']}")
            team_members = await db.get_collection("users").find(
                {"team_id": team["_id"]}
            ).to_list(length=None)

            for member in team_members:
                resume = member.get("resume")
                if resume:
                    file_id = resume["file_id"]
                    file_name = resume["file_name"]
                    file = await message.bot.get_file(file_id)
                    file_path = file.file_path
                    await message.bot.download_file(file_path, file_name)
                    zip_path = f"{team_name}/{file_name}"
                    main_zip.write(file_name, zip_path)
                    os.remove(file_name)

    await message.answer_document(FSInputFile(main_zip_filename))
    os.remove(main_zip_filename)
    await message.answer("–£—Å—ñ CV –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")

@router.message(F.text == "–Æ–∑–µ—Ä–∏ –±–µ–∑ CV")
async def handle_users_without_cv(message: Message, db: AgnosticDatabase):
    users_without_cv = await db.get_collection("users").find({
        "$or": [
            {"resume": {"$exists": False}},
            {"resume": None}
        ]
    }).to_list(length=None)

    if not users_without_cv:
        await message.answer("–£—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ —Å–≤–æ—î CV. ‚úÖ")
        return

    grouped_by_team = {}
    for user in users_without_cv:
        team_id = user.get("team_id")
        if team_id not in grouped_by_team:
            grouped_by_team[team_id] = []
        grouped_by_team[team_id].append(user)

    lines = []
    for team_id, members in grouped_by_team.items():
        if team_id:
            team_doc = await db.get_collection("teams").find_one({"_id": team_id})
            team_name = team_doc.get("name", f"team_{team_id}") if team_doc else "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞"
        else:
            team_name = "–ë–µ–∑ –∫–æ–º–∞–Ω–¥–∏"

        lines.append(f"\n<b>–ö–æ–º–∞–Ω–¥–∞:</b> {team_name}")

        for user in members:
            username = user.get("contact", {}).get("username")
            name = user.get("name", "–ë–µ–∑ —ñ–º–µ–Ω—ñ")
            if username:
                lines.append(f"  ‚Ä¢ {name} (@{username})")
            else:
                lines.append(f"  ‚Ä¢ {name}")

    final_text = "\n".join(lines)
    await message.answer(final_text, parse_mode="HTML")

