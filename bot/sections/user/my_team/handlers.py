from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from motor.core import AgnosticDatabase

from bot.sections.user.my_team.services import user_has_team, update_user_cv, update_team_github, unset_user_team, \
    get_team_by_name, set_user_team, create_team
from bot.sections.user.my_team.states import TeamCreationStates, TeamJoinStates, TeamGitHubStates, TeamCVStates
from bot.sections.user.quiz_about_user.services import is_user_registered
from bot.stages.utils.stages_service import get_current_stage
from bot.utils.keyboards.team_keyboard import get_team_keyboard, cancel_send_cv_keyboard, handle_find_team_keyboard, \
    cancel_send_github_keyboard
from bot.utils.middleware.Time import is_duplicate_request
from bot.utils.validators.my_team_validator import validate_text_only
from bot.stages.utils.bot_stage_filter import BotStageFilter
from bot.utils.keyboards.start_keyboard import get_start_keyboard, get_user_team_info
from bot.sections.user.my_team.services import send_team_info
from bot.sections.user.my_team.data import photo_path_team_image, text_find_team, chat_link

router = Router()

@router.message(F.text == "–ú–æ—è –ö–æ–º–∞–Ω–¥–∞üë•", BotStageFilter("before_registration"))
async def handle_team_before_registration(message: types.Message):
    user_id = message.from_user.id
    message_text = message.text or ""

    if is_duplicate_request(user_id, message_text):
        return
    photo = FSInputFile(photo_path_team_image)
    await message.answer_photo(photo=photo, caption="–î–æ—á–µ–∫–∞–π—Å—è –ø–æ—á–∞—Ç–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –¥–æ–ª—É—á–∏—Ç–∏—Å—å –¥–æ –∫–æ–º–∞–Ω–¥–∏üíª")

@router.message(F.text == "–ú–æ—è –ö–æ–º–∞–Ω–¥–∞üë•", BotStageFilter(["registration","test", "before_event","event"]))
async def handle_team_registration(message: types.Message, db: AgnosticDatabase):
    user_id = message.from_user.id
    message_text = message.text or ""

    if is_duplicate_request(user_id, message_text):
        return

    await send_team_info(message, db, user_id)

@router.message(F.text == "–ó–Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—Éüîç")
async def handle_find_team(message: types.Message):
    user_id = message.from_user.id
    message_text = message.text or ""

    if is_duplicate_request(user_id, message_text):
        return

    photo = FSInputFile(photo_path_team_image)
    reply_markup = handle_find_team_keyboard()
    await message.answer_photo(photo=photo, caption=text_find_team, reply_markup=reply_markup, parse_mode="HTML")

@router.message(F.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—éüè†")
async def handle_back(message: types.Message, db):
    user_id = message.from_user.id
    message_text = message.text or ""
    test_approved, event_approved = await get_user_team_info(db, message.from_user.id)

    if is_duplicate_request(user_id, message_text):
        return

    is_registered = await is_user_registered(db, message.from_user.username)
    stage = await get_current_stage(db)
    main_kb = get_start_keyboard(stage, is_registered, test_approved, event_approved)
    await message.answer("–í–∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_kb)

@router.callback_query(F.data == "create_team")
async def cmd_create_team(callback_query: types.CallbackQuery, state: FSMContext, db: AgnosticDatabase):
    user_id = callback_query.from_user.id
    current_stage = await get_current_stage(db)
    if current_stage != "registration":
        await callback_query.message.answer("–ù–∞ –∂–∞–ª—å, <b>—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b> –ß–µ–∫–∞—î–º–æ —Ç–µ–±–µ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É ü´Ç", parse_mode="HTML")
        return
    if await user_has_team(db, user_id):
        await callback_query.message.answer("–¢–∏ –≤–∂–µ –≤ –∫–æ–º–∞–Ω–¥—ñ. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–π–¥–∏ –∑ –Ω–µ—ó, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É.")
        return
    await callback_query.message.answer("–í–≤–µ–¥–∏ –ª–æ–≥—ñ–Ω (–æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º).")
    await state.set_state(TeamCreationStates.waiting_for_team_name)

@router.message(TeamCreationStates.waiting_for_team_name)
async def process_team_name(message: types.Message, state: FSMContext):
    if not await validate_text_only(message):
        return
    team_name = message.text.strip()
    if len(team_name) < 2 or len(team_name) > 15:
        await message.answer("–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 2 –¥–æ 15 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return
    await state.update_data(team_name=team_name)
    await message.answer("–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–∞–Ω–¥–∏.")
    await state.set_state(TeamCreationStates.waiting_for_team_password)

@router.message(TeamCreationStates.waiting_for_team_password)
async def process_team_password(message: types.Message, state: FSMContext, db: AgnosticDatabase):
    if not await validate_text_only(message):
        return
    password = message.text.strip()
    user_id = message.from_user.id
    data = await state.get_data()
    team_name = data.get("team_name")
    existing_team = await get_team_by_name(db, team_name)
    if existing_team:
        await message.answer(f"–ö–æ–º–∞–Ω–¥–∞ –∑ –Ω–∞–∑–≤–æ—é <b>{team_name}</b> –≤–∂–µ —ñ—Å–Ω—É—î. –û–±–µ—Ä–∏ —ñ–Ω—à—É –Ω–∞–∑–≤—É –∞–±–æ –ø—Ä–∏—î–¥–Ω–∞–π—Å—è –¥–æ –Ω–µ—ó.",
                             parse_mode="HTML")
        await state.clear()
        return
    team_id = await create_team(db, team_name, password)
    await set_user_team(db, user_id, team_id)
    await state.clear()
    await message.answer(f"–ö–æ–º–∞–Ω–¥–∞ {team_name} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞.üéâ")
    await send_team_info(message, db, user_id)

@router.callback_query(F.data == "join_team")
async def cmd_join_team(callback_query: types.CallbackQuery, state: FSMContext, db: AgnosticDatabase):
    user_id = callback_query.from_user.id
    current_stage = await get_current_stage(db)
    if current_stage != "registration":
        await callback_query.message.answer("–ù–∞ –∂–∞–ª—å, <b>—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b> –ß–µ–∫–∞—î–º–æ —Ç–µ–±–µ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É ü´Ç", parse_mode="HTML")
        return
    if await user_has_team(db, user_id):
        await callback_query.message.answer("–¢–∏ –≤–∂–µ –≤ –∫–æ–º–∞–Ω–¥—ñ. –°–ø–æ—á–∞—Ç–∫—É –ø–æ–∫–∏–Ω—å —ó—ó, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –Ω–æ–≤–æ—ó.")
        return
    await callback_query.message.answer("–í–≤–µ–¥–∏ –ª–æ–≥—ñ–Ω –∫–æ–º–∞–Ω–¥–∏, –¥–æ —è–∫–æ—ó —Ö–æ—á–µ—à –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è.")
    await state.set_state(TeamJoinStates.waiting_for_team_name)

@router.message(TeamJoinStates.waiting_for_team_name)
async def process_join_team_name(message: types.Message, state: FSMContext):
    if not await validate_text_only(message):
        return
    team_name = message.text.strip()
    await state.update_data(team_name=team_name)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–∏:")
    await state.set_state(TeamJoinStates.waiting_for_team_password)

@router.message(TeamJoinStates.waiting_for_team_password)
async def process_join_team_password(message: types.Message, state: FSMContext, db: AgnosticDatabase):
    if not await validate_text_only(message):
        return

    password = message.text.strip()
    user_id = message.from_user.id
    data = await state.get_data()
    team_name = data.get("team_name")
    team_doc = await get_team_by_name(db, team_name)
    if not team_doc:
        await message.answer(f"–ö–æ–º–∞–Ω–¥—É –∑ –Ω–∞–∑–≤–æ—é <b>{team_name}</b> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", parse_mode="HTML")
        await state.clear()
        return
    if team_doc.get("password") != password:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∞–±–æ —Å–∫–∞—Å—É–π –¥—ñ—é.‚ùå")
        return

    team_id = team_doc["_id"]
    member_count = await db.get_collection("users").count_documents({"team_id": team_id})
    if member_count >= 5:
        await message.answer(
            f"–ö–æ–º–∞–Ω–¥–∞ <b>{team_doc['name']}</b> –≤–∂–µ –º–∞—î 5 —É—á–∞—Å–Ω–∏–∫—ñ–≤ —ñ –Ω–µ –º–æ–∂–µ –ø—Ä–∏–π–Ω—è—Ç–∏ –±—ñ–ª—å—à–µ.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    await set_user_team(db, user_id, team_id)
    await state.clear()
    await message.answer(
        f"–í—ñ—Ç–∞—î–º–æ! –¢–µ–ø–µ—Ä —Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—ñ {team_doc['name']}.",
        reply_markup=get_team_keyboard(True)
    )
    await send_team_info(message, db, user_id)


@router.message(F.text == "–ü–æ–∫–∏–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥—Éüö™")
async def cmd_leave_team(message: types.Message, db: AgnosticDatabase):
    user_id = message.from_user.id
    message_text = message.text or ""

    if is_duplicate_request(user_id, message_text):
        return

    stage = await get_current_stage(db)
    username = message.from_user.username
    is_registered = await is_user_registered(db, username)
    test_approved, event_approved = await get_user_team_info(db, message.from_user.id)

    if stage != "registration":
        await message.answer("–ü–æ–∫–∏–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥—É –≤–∂–µ –Ω–µ –º–æ–∂–Ω–∞.", reply_markup=get_team_keyboard(True))
        return
    if not await user_has_team(db, user_id):
        await message.answer("–¢–∏ —â–µ –Ω–µ –≤ –∂–æ–¥–Ω—ñ–π –∫–æ–º–∞–Ω–¥—ñ.")
        return
    await unset_user_team(db, user_id)
    await message.answer("–¢–∏ –ø–æ–∫–∏–Ω—É–≤(-–ª–∞) –∫–æ–º–∞–Ω–¥—É.", reply_markup=get_start_keyboard(stage, is_registered, test_approved, event_approved))

@router.message(F.text == "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–πüìÇ")
async def cmd_send_github(message: types.Message, state: FSMContext, db: AgnosticDatabase):
    user_id = message.from_user.id
    message_text = message.text or ""

    if is_duplicate_request(user_id, message_text):
        return

    # current_stage = await get_current_stage(db)
    # if current_stage != "registration":
    #     await message.answer("–ß–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é –≤–∂–µ —Å–ø–ª–∏–Ω—É–≤.")
    #     return
    if not await user_has_team(db, user_id):
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏—î–¥–Ω–∞–π—Å—è –¥–æ –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏ —Å–≤–æ—é.")
        return
    await message.answer(
        "–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –ø—Ä–æ—î–∫—Ç—É (–æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º). "
        "–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞–≤(-–ª–∞), –≤—ñ–¥–ø—Ä–∞–≤ '–°–∫–∞—Å—É–≤–∞—Ç–∏'.",
        reply_markup=cancel_send_github_keyboard()
    )
    await state.set_state(TeamGitHubStates.waiting_for_github_link)

@router.message(F.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏‚ùå", TeamGitHubStates.waiting_for_github_link)
async def cancel_github_upload(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    message_text = message.text or ""

    if is_duplicate_request(user_id, message_text):
        return

    await state.clear()
    await message.answer("–î–æ–¥–∞–≤–∞–Ω–Ω—è GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.‚ùå", reply_markup=get_team_keyboard(True))


@router.message(TeamGitHubStates.waiting_for_github_link)
async def process_github_link(message: types.Message, state: FSMContext, db: AgnosticDatabase):
    if not await validate_text_only(message):
        return
    link = message.text.strip()
    user_id = message.from_user.id
    if not link.startswith("https://"):
        await message.answer("–ü–æ—Å–∏–ª–∞–Ω–Ω—è –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ https://. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.‚ö†Ô∏è")
        return
    users_collection = db.get_collection("users")
    user_doc = await users_collection.find_one({"chat_id": user_id})
    team_id = user_doc.get("team_id")
    if not team_id:
        await message.answer("–£–ø—Å! –¢–∏ –Ω–µ –º–∞—î—à –∫–æ–º–∞–Ω–¥–∏.üò∂‚Äçüå´Ô∏è")
        await state.clear()
        return
    await update_team_github(db, team_id, link)
    await state.clear()
    await message.answer("GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!‚úÖ", reply_markup=get_team_keyboard(True))

@router.message(F.text == "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ä–µ–∑—é–º–µüìÑ")
async def cmd_send_cv(message: types.Message, state: FSMContext, db: AgnosticDatabase):
    user_id = message.from_user.id
    message_text = message.text or ""

    if is_duplicate_request(user_id, message_text):
        return

    # current_stage = await get_current_stage(db)
    # if current_stage != "registration":
    #     await message.answer("–ß–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–∑—é–º–µ –≤–∂–µ —Å–ø–ª–∏–Ω—É–≤.")
    #     return
    await message.answer(
        "–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–≤—ñ–π PDF-—Ñ–∞–π–ª —ñ–∑ —Ä–µ–∑—é–º–µ (–∞–±–æ –±—É–¥—å-—è–∫–∏–π —ñ–Ω—à–∏–π —Ñ–æ—Ä–º–∞—Ç, —è–∫–∏–π –ø—ñ–¥—Ç—Ä–∏–º—É—î TG). üìÑ–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞–≤(-–ª–∞), –≤—ñ–¥–ø—Ä–∞–≤ '–°–∫–∞—Å—É–≤–∞—Ç–∏'.", reply_markup=cancel_send_cv_keyboard()
    )
    await state.set_state(TeamCVStates.waiting_for_cv)

@router.message(F.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏‚ùå", TeamCVStates.waiting_for_cv)
async def cancel_cv_upload(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    message_text = message.text or ""

    if is_duplicate_request(user_id, message_text):
        return

    await state.clear()
    await message.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CV —Å–∫–∞—Å–æ–≤–∞–Ω–æ.‚ùå", reply_markup=get_team_keyboard(True))

@router.message(TeamCVStates.waiting_for_cv, F.document)
async def process_cv_document(message: types.Message, state: FSMContext, db: AgnosticDatabase):
    document = message.document
    MAX_FILE_SIZE = 50 * 1024 * 1024  # 50 –ú–ë —É –±–∞–π—Ç–∞—Ö

    if document.file_size > MAX_FILE_SIZE:
        await state.clear()
        await message.answer(
            "–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –º–∞—î –±—É—Ç–∏ 50 –ú–ë. –°–ø—Ä–æ–±—É–π –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—à–∏–π —Ñ–∞–π–ª.",
            reply_markup=get_team_keyboard(True)
        )
        return

    user_id = message.from_user.id
    await update_user_cv(
        db,
        user_id=user_id,
        file_id=document.file_id,
        file_name=document.file_name or "resume",
        file_size=document.file_size,
    )
    await state.clear()
    await message.answer("–†–µ–∑—é–º–µ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!‚úÖ", reply_markup=get_team_keyboard(True))


@router.message(TeamCVStates.waiting_for_cv)
async def fallback_cv_upload(message: types.Message):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–∞–π–ª —ñ–∑ —Ä–µ–∑—é–º–µ –∞–±–æ –≤–≤–µ–¥–∏ '–°–∫–∞—Å—É–≤–∞—Ç–∏', —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏.", reply_markup=cancel_send_cv_keyboard())

@router.message(TeamGitHubStates.waiting_for_github_link)
async def fallback_github_upload(message: types.Message):
    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ GitHub –∞–±–æ –≤–≤–µ–¥–∏ '–°–∫–∞—Å—É–≤–∞—Ç–∏', —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏.",
        reply_markup=cancel_send_github_keyboard()
    )
