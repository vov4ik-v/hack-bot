from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    FSInputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from motor.core import AgnosticDatabase
from bot.sections.user.registration.services import is_user_registered

from bot.sections.user.registration.services import process_registration_data
from bot.utils.keyboards.start_keyboard import get_start_keyboard
from bot.utils.keyboards.user_registration_keyboard import consent_keyboard, contact_keyboard, course_keyboard, \
    university_keyboard
from bot.utils.validators.user_registration_validator import validate_age, validate_email, validate_university, \
    validate_course

router = Router()
photo_path = "asset/hack_register_photo.jpg"

# –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤—Å—ñ —Å—Ç–∞–Ω–∏
class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_university = State()
    waiting_for_course = State()
    waiting_for_technologies = State()
    waiting_for_source = State()
    waiting_for_it_experience = State()
    waiting_for_contact = State()
    waiting_for_email = State()
    waiting_for_consent = State()



@router.message(F.text == "üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è")
async def registration(message: types.Message, state: FSMContext, db: AgnosticDatabase):
    username = message.from_user.username
    chat_id = message.chat.id

    if await is_user_registered(db, username):
        await message.answer("üéâ –¢–∏ —á–µ–º–ø—ñ–æ–Ω —ñ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ BEST::HACKath0n! ü•á –Ø–∫—â–æ —Ö–æ—á–µ—à –æ–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, –∑–≤–µ—Ä–Ω–∏—Å—å –¥–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—ñ–≤ ü§ó")
        return

    await state.update_data(chat_id=chat_id)
    await message.answer("–Ø–∫ –º–µ–Ω—ñ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?")
    await state.set_state(RegistrationStates.waiting_for_name)


@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–ì–∞—Ä–Ω–æ –∑–≤—É—á–∏—Ç—å ü•∞")
    await message.answer("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")
    await state.set_state(RegistrationStates.waiting_for_age)


@router.message(RegistrationStates.waiting_for_age)
async def process_age(message: types.Message, state: FSMContext):
    if not validate_age(message.text):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ (—á–∏—Å–ª–æ –≤—ñ–¥ 10 –¥–æ 100).")
        return
    await state.update_data(age=message.text)
    await message.answer("–î–µ –≤—á–∏—à—Å—è? –í–∏–±–µ—Ä–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –∞–±–æ –≤–≤–µ–¥–∏.", reply_markup=university_keyboard)
    await state.set_state(RegistrationStates.waiting_for_university)

@router.message(RegistrationStates.waiting_for_university)
async def process_university(message: types.Message, state: FSMContext):
    if not validate_university(message.text):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –∑—ñ —Å–ø–∏—Å–∫—É: –ù–£–õ–ü –∞–±–æ –õ–ù–£.")
        return
    await state.update_data(university=message.text)
    await message.answer("–Ø–∫–∏–π —Ç–∏ –∫—É—Ä—Å?", reply_markup=course_keyboard)
    await state.set_state(RegistrationStates.waiting_for_course)

@router.message(RegistrationStates.waiting_for_course)
async def process_course(message: types.Message, state: FSMContext):
    if not validate_course(message.text):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –∫—É—Ä—Å –≤—ñ–¥ 1 –¥–æ 5.")
        return
    await state.update_data(course=message.text)
    await message.answer("–Ø–∫—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó –∑–±–∏—Ä–∞—î—à—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞ –ø—Ä–æ—î–∫—Ç—ñ?(–ü–µ—Ä–µ—Ä–∞—Ä—Ö—É–π —á–µ—Ä–µ–∑ –∫–æ–º—É)")
    await state.set_state(RegistrationStates.waiting_for_technologies)


@router.message(RegistrationStates.waiting_for_technologies)
async def process_technologies(message: types.Message, state: FSMContext):
    await state.update_data(technologies=message.text)
    await message.answer("–¢–µ —â–æ —Ç—Ä–µ–±–∞!")
    await message.answer("–ó–≤—ñ–¥–∫–∏ –¥—ñ–∑–Ω–∞–≤—Å—è –ø—Ä–æ Hackathon?")
    await state.set_state(RegistrationStates.waiting_for_source)


@router.message(RegistrationStates.waiting_for_source)
async def process_source(message: types.Message, state: FSMContext):
    await state.update_data(source=message.text)
    await message.answer("–î—è–∫—É—é –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –¥–ª—è –º–µ–Ω–µ —Ü–µ –¥—É–∂–µ –∫–æ—Ä–∏—Å–Ω–æ)")
    await message.answer("–í–∂–µ –ø—Ä–∞—Ü—é—î—à –≤ –∞–π—Ç—ñ —Å—Ñ–µ—Ä—ñ?")
    await state.set_state(RegistrationStates.waiting_for_it_experience)


@router.message(RegistrationStates.waiting_for_it_experience)
async def process_it_experience(message: types.Message, state: FSMContext):
    await state.update_data(it_experience=message.text)
    await message.answer("–î—è–∫—É—é –∑–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é)")
    await message.answer("–û–±–º—ñ–Ω—è—î–º–æ—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏? –ù–∞—Ç–∏—Å–Ω–∏ '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º' –Ω–∏–∂—á–µ üëá", reply_markup=contact_keyboard)
    await state.set_state(RegistrationStates.waiting_for_contact)


@router.message(F.contact, RegistrationStates.waiting_for_contact)
async def process_contact(message: types.Message, state: FSMContext):
    contact_info = {
        "phone_number": message.contact.phone_number,
        "username": message.from_user.username
    }
    await state.update_data(contact=contact_info)
    await message.answer(
        "–ê —è –∑–∞–ª–∏—à–∞—é —Ç–æ–±—ñ –∫–æ–Ω—Ç–∞–∫—Ç –≥–æ–ª–æ–≤–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞: @sonyoe ü•∞",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer("–ù–∞–æ—Å—Ç–∞–Ω–æ–∫, –≤–∫–∞–∂–∏ –∞–¥—Ä–µ—Å—É —Å–≤–æ—î—ó –ø–æ—à—Ç–æ–≤–æ—ó —Å–∫—Ä–∏–Ω—å–∫–∏.")
    await state.set_state(RegistrationStates.waiting_for_email)


@router.message(RegistrationStates.waiting_for_email)
async def process_email(message: types.Message, state: FSMContext):
    if not validate_email(message.text):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π email —É —Ñ–æ—Ä–º–∞—Ç—ñ example@example.com.")
        return
    await state.update_data(email=message.text)
    await message.answer("–î—è–∫—É—é ü•∞")
    await message.answer("–ó–∞–ª–∏—à–∏–ª–æ—Å—è —Ç—ñ–ª—å–∫–∏ –¥–∞—Ç–∏ –∑–≥–æ–¥—É –Ω–∞ –æ–±—Ä–æ–±–∫—É –¥–∞–Ω–∏—Ö. –ù–∞—Ç–∏—Å–Ω–∏ '–ü–æ–≥–æ–¥–∂—É—é—Å—å' –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.", reply_markup=consent_keyboard)
    await state.set_state(RegistrationStates.waiting_for_consent)


@router.callback_query(F.data == "consent_yes")
async def process_consent(callback: types.CallbackQuery, state: FSMContext, db: AgnosticDatabase):
    await callback.answer("–ó–≥–æ–¥—É –æ—Ç—Ä–∏–º–∞–Ω–æ!")

    try:
        success_register_photo_path = "asset/hack_register_photo.jpg"
        photo = FSInputFile(success_register_photo_path)

        state_data = await state.get_data()
        user_data = await process_registration_data(db, state_data)
        print("user_data", user_data)

        await state.clear()

        username = callback.from_user.username
        is_registered = await is_user_registered(db, username)
        updated_keyboard = get_start_keyboard(is_registered)



        await callback.message.answer_photo(photo= photo,caption=
            """–í—ñ—Ç–∞—é —ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è–º —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó! üéâ
–¢–µ–ø–µ—Ä —Ç–∏ –∑–º–æ–∂–µ—à:
      - –ó–Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É
      - –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É
      - –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
      - –ó–∞–π—Ç–∏ –≤ —á–∞—Ç, –¥–µ –±—É–¥—É—Ç—å –≤—Å—ñ —É—á–∞—Å–Ω–∏–∫–∏
      - –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–º–∞–≥–∞–Ω–Ω—è
      –¢–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ!""",
            reply_markup=updated_keyboard
        )

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
        await callback.message.answer(
            "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )

